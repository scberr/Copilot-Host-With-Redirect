@page
@model BotHostingWebsite.Pages.WebChatModel
@{
    Layout = null;
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - BotHostingWebsite</title>
    <script type="importmap"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>

    <script src="https://cdn.botframework.com/botframework-webchat/latest/webchat.js"></script>
    <script type="text/javascript" src="https://alcdn.msauth.net/lib/1.2.0/js/msal.js"></script>
    <script src="@Html.Raw("https://unpkg.com/@azure/storage-blob@10.3.0/browser/azure-storage.blob.min.js")"
            integrity="sha384-fsfhtLyVQo3L3Bh73qgQoRR328xEeXnRGdoi53kjo1uectCfAHFfavrBBN2Nkbdf"
            crossorigin="anonymous"></script>
    <script type="text/javascript">
        if (typeof Msal === 'undefined') document.write(unescape("%3Cscript src='https://alcdn.msftauth.net/lib/1.2.0/js/msal.js' type='text/javascript' %3E%3C/script%3E"));
    </script>

    <style>
        html, body {
            height: 100%;
        }

        body {
            margin: 0;
        }

        h1 {
            font-size: 16px;
            font-family: Segoe UI;
            line-height: 20px;
            color: whitesmoke;
            display: table-cell;
            padding: 13px 0px 0px 20px;
        }

        #heading {
            background-color: black;
            height: 50px;
        }

        .main {
            margin: 18px;
            border-radius: 4px;
        }

        div[role="form"] {
            background-color: black;
        }

        #webchat {
            position: fixed;
            height: calc(100% - 50px);
            width: 100%;
            top: 50px;
            overflow: hidden;
        }

        #heading {
            background-color: black;
            background-repeat: no-repeat;
            background-size: cover;
            background-attachment: fixed;
            background-position: center;
            height: 50px;
            width: 100%;
            overflow: hidden;
            position: fixed;
        }

        h1 {
            font-size: 14px;
            font-family: Segoe UI;
            font-style: normal;
            font-weight: 600;
            font-size: 14px;
            line-height: 20px;
            color: #F3F2F1;
            letter-spacing: 0.005em;
            display: table-cell;
            vertical-align: middle;
            padding: 13px 0px 0px 20px;
        }

        #chatwindow {
            height: 80%;
            width: 100%;
            overflow: hidden;
            position: fixed;
        }

        #loginButton {
            height: 100px;
            width: 100%;
            position: fixed;
        }
    </style>
</head>
<body>

    <div class="container">
        <main role="main" class="pb-3">

<div id="chatwindow">
    <div id="heading">
        <div><span>SSO Test Bot</span></div>
    </div>
    <div id="webchat">
    </div>
</div>
        </main>
    </div>

    <footer class="border-top footer text-muted">
    </footer>

    <script>


        var clientApplication;

        (function () {
            var msalConfig = {
                auth: {
                    clientId: 'CLIENT_ID_FROM_CUSTOM_WEBSITE',
                    authority: 'https://login.microsoftonline.com/YOUR_TENANT_ID'
                },
                cache: {
                    cacheLocation: 'localStorage',
                    storeAuthStateInCookie: false
                }
            };
            if (!clientApplication) {
                clientApplication = new Msal.UserAgentApplication(msalConfig);
            }
        }());


        function onSignin(idToken) {
            let user = clientApplication.getAccount();
            document.getElementById("userName").innerHTML = "Currently logged in as " + user.name;

            renderChatWidget();
        }

        function onSignInClick() {
            let requestObj = {
                scopes: ["user.read", 'openid', 'profile', 'api://ac889341-279e-4cb6-a3b0-308332866925/SampleBot.Use']
            };

            clientApplication.loginPopup(requestObj).then(onSignin).catch(function (error) { console.log(error) });
        }

        function getOAuthCardResourceUri(activity) {
            if (activity &&
                activity.attachments &&
                activity.attachments[0] &&
                activity.attachments[0].contentType === 'application/vnd.microsoft.card.oauth' &&
                activity.attachments[0].content.tokenExchangeResource) {
                // asking for token exchange with AAD
                return activity.attachments[0].content.tokenExchangeResource.uri;
            }
        }

         function exchangeTokenAsync(resourceUri) {
            // As the user has already authenticated against the website, we can use that token for bot communication

            return $.ajax({
                type: 'GET',
                contentType: "application/json; charset=utf-8",
                dataType:"json",
                url: "/WebChat?handler=BotToken",
                succces: function(data){
                    return data;
                }
            });
        }

        async function fetchJSON(url, options = {}) {
            const res = await fetch(url, {
                ...options,
                headers: {
                    ...options.headers,
                    accept: 'application/json'
                }
            });

            if (!res.ok) {
                throw new Error(`Failed to fetch JSON due to ${res.status}`);
            }

            return await res.json();
        }

        function renderChatWidget()
        {

            (async function main() {

                // Add your BOT ID below
                var theURL = "TOKEN_ENDPOINT_FROM_AGENT_MOBILE_CHANNEL_SCREEN" // you can find the token URL via the mobile app channel configuration

                var userId = clientApplication.account?.accountIdentifier != null ?
                    ("You-customized-prefix" + clientApplication.account.accountIdentifier).substr(0, 64)
                    : (Math.random().toString() + Date.now().toString()).substr(0, 64);

                const { token } = await fetchJSON(theURL);
                const directLine = window.WebChat.createDirectLine({ token });
                const store = WebChat.createStore({}, ({ dispatch }) => next => action => {
                    const { type } = action;
                    if (action.type === 'DIRECT_LINE/CONNECT_FULFILLED') {
                        dispatch(
                           {
                            type: 'WEB_CHAT/SEND_EVENT',
                            payload: {
                                name: 'startConversation',
                                type: 'event',
                                value: { text: "hello" }
                            }
                        }


                        );
                        return next(action);
                    }
                    if (action.type === 'DIRECT_LINE/INCOMING_ACTIVITY') {
                        const activity = action.payload.activity;
                        let resourceUri;
                        if (activity.from && activity.from.role === 'bot' &&
                            (resourceUri = getOAuthCardResourceUri(activity))

                        ) {
                            exchangeTokenAsync(resourceUri).then(function (token) {
                                if (token) {
                                    directLine.postActivity({
                                        type: 'invoke',
                                        name: 'signin/tokenExchange',
                                        value: {
                                            id: activity.attachments[0].content.tokenExchangeResource.id,
                                            connectionName: activity.attachments[0].content.connectionName,
                                            token
                                        },
                                        "from": {
                                            id: userId,
                                            name: '@Model.DisplayName' /*clientApplication.account.name*/,
                                            role: "user"
                                        }
                                    }).subscribe(
                                        id => {
                                            if (id === 'retry') {
                                                // bot was not able to handle the invoke, so display the oauthCard
                                                return next(action);
                                            }
                                            // else: tokenexchange successful and we do not display the oauthCard
                                        },
                                        error => {
                                            // an error occurred to display the oauthCard
                                            return next(action);
                                        }
                                    );
                                    return;
                                }
                                else
                                    return next(action);
                            });
                        }
                        else
                            return next(action);
                    }
                    else
                        return next(action);
                });

                const styleOptions = {

                    // Add styleOptions to customize Web Chat canvas
                    hideUploadButton: true
                };


                window.WebChat.renderWebChat(
                    {
                        directLine: directLine,
                        store,
                        userID: userId,
                        styleOptions
                    },
                    document.getElementById('webchat')
                );
            })().catch(err => console.error("An error occurred: " + err));
        }
    </script>


    <script>
        renderChatWidget();
    </script>

</body>
</html>
